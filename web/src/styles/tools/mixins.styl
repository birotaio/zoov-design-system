/*
 * Reset
 */
reset-sizing()
  box-sizing border-box

reset()
  box-sizing border-box
  border 0
  margin 0
  padding 0

/*
 * Colors
 */
bg-color($color_value, $important = false)
  background-color $color_value important($important)
  border-color $color_value important($important)

text-color($color_value, $important = false)
  color $color_value important($important)
  caret-color $color_value important($important)

  path
    fill $color_value important($important)

/*
 * Elevations
 */
elevation-color($z, $color = $colors.white.base, $important = false)
  $shift = $z + 1
  if $z == 'inset'
    $shift = 0
  $r = max(min(red($color) + $red-shift[$shift], 255), 0)
  $g = max(min(green($color) + $green-shift[$shift], 255), 0)
  $b = max(min(blue($color) + $blue-shift[$shift], 255), 0)
  background-color: unquote('rgba(' + $r + ', ' + $g + ', ' + $b + ', 1)') important($important)

elevation-shadow-light($z, $important = false)
  if $z == 'inset'
    box-shadow: $shadow-inset-light important($important)
  else if $z == 0
    box-shadow: none important($important)
  else
    box-shadow: $shadow-umbra-light[$z - 1],
                $shadow-penumbra-light[$z - 1] important($important)

elevation-shadow-dark($z, $color = $colors.neutral.dark-4, $important = false)
  if $z == 'inset'
    box-shadow: $shadow-inset-dark important($important)
  else if $z == 0
    box-shadow: none important($important)
  else if $z == 1
    box-shadow: $shadow-umbra-dark[0] alpha($color, 0.08),
                $shadow-penumbra-dark[0] important($important)
  else
    box-shadow: $shadow-umbra-dark[$z - 1],
                $shadow-penumbra-dark[$z - 1] important($important)

elevation($z, $important = false)
  // TODO detect dark / light mode
  elevation-light($z, $important)

elevation-light($z, $important = false)
  elevation-color($z, $colors.white.base, $important)
  elevation-shadow-light($z, $important)

elevation-dark($z, $important = false)
  elevation-color($z, $colors.neutral.dark-4, $important)
  elevation-shadow-dark($z, $colors.neutral.dark-4, $important)

elevation-transition($important = false)
  transition: box-shadow $elevation-duration $ease, background-color $elevation-duration $ease important($important)
  will-change: box-shadow, background-color important($important)

/*
 * Typography
 */
typography-rule($name, $settings, $rule)
  if $name in $settings
    {$rule}: $settings[$name]

typography-rules($settings)
  typography-rule('size', $settings, 'font-size')
  typography-rule('weight', $settings, 'font-weight')
  typography-rule('line-height', $settings, 'line-height')
  typography-rule('letter-spacing', $settings, 'letter-spacing')
  typography-rule('font', $settings, 'font-family')
  typography-rule('color', $settings, 'color')

/*
 * Shape
 */
rounded($inc)
  width size($inc)
  height size($inc)
  border-radius size($inc / 2)

rounded-lr($inc)
  height size($inc)
  padding 0 size($inc / 2)
  border-radius size($inc / 2)

square($inc)
  width size($inc)
  height size($inc)
  min-width size($inc)
  min-height size($inc)

/*
 * Full Sizing
 */
fixed-full()
  position fixed
  top 0
  left 0
  right 0
  bottom 0

absolute-full()
  position absolute
  top 0
  left 0
  right 0
  bottom 0

/*
 * Positionning
 */
fixed-centered() {
  position fixed
  top 50%
  left 50%
  transform translate(-50%, -50%)
}

absolute-centered() {
  position absolute
  top 50%
  left 50%
  transform translate(-50%, -50%)
}

/*
 * Interactions (focus, hover, etc...)
 */
make-interactive()
  background-image linear-gradient(transparent, transparent)
  transition $background-image-transition

  &:focus
    background-image linear-gradient($focus-background, $focus-background)

  &:hover
    background-image linear-gradient($hover-background, $hover-background)

  &:active
    background-image linear-gradient($active-background, $active-background)

/*
 * Hatching
 */
hatched($color)
  background-image repeating-linear-gradient(-45deg, transparent, transparent 3px, $color 3px, $color 4px)
